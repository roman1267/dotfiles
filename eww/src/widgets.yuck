;; Important glyphs
;; 󰐥 󰑐
;; 󰓃
;; 󰌢
;; 
;; °
;; Main menu
(defwidget main[]
  (box
    :halign "center"
    :space-evenly true
    :spacing 80
    :hexpand true
    (sys_info)
    (utils)
    (workspaces)
  )
)

(defwidget utils []
  (eventbox
    :onhoverlost "eww update utils_stack=0"
    (stack
      :selected utils_stack
      :same-size true
      (utils_display)
      (power_menu)
      (confirm_poweroff)
      (confirm_reboot)
      (confirm_logout)
      (brightness)
      (volume)
    )
  )
)

(defwidget utils_display[]
  (box
    (movie_mode)
    (button
      :onclick "eww update utils_stack=1"
      (label
        :width 40
        :text "󰐥"
        :css "label {font-size: 20;font-family: JetBrainsNerdFontMono;}"
      )
    )
    (button
      :onclick "eww update utils_stack=5"
      (label
        :text "☼"
        :css "label {font-size: 20;}"
      )
    )
    (eventbox
      :onhover "if [ \"$(pactl get-sink-mute @DEFAULT_SINK@)\" == \"Mute: yes\" ]; then eww update is_muted=\"Mute: yes\"; else eww update is_muted=\"Mute: no\"; fi"

      (button
        :onclick "eww update utils_stack=6"
        (label
          :text "󰓃"
          :css "label {font-size: 20;font-family: JetBrainsNerdFontMono;}"
        )
      )
    )
  )
)

(defwidget power_menu []
  (box
    (button
      :width 40
      :onclick "eww update utils_stack=2"
      "poweroff"
    )
    (button
      :width 40
      :onclick "eww update utils_stack=3"
      "reboot"
    )
    (button
      :width 40
      :onclick "eww update utils_stack=4"
      "logout"
    )
  )
)

(defwidget confirm_poweroff []
  (box
    (button
      :width 40
      :onclick "sudo /sbin/poweroff"
      "poweroff"
    )
    (button
      :width 40
      :onclick "eww update utils_stack=1"
      "no"
    )
  )
)

(defwidget confirm_reboot []
  (box
    (button
      :width 40
      :onclick "sudo /sbin/reboot"
      "reboot"
    )
    (button
      :width 40
      :onclick "eww update utils_stack=1"
      "no"
    )
  )
)

(defwidget confirm_logout []
  (box
    (button
      :width 40
      :onclick "pkill -u ${whoami}"
      "logout"
    )
    (button
      :width 40
      :onclick "eww update utils_stack=1"
      "no"
    )
  )
)

(defwidget brightness []
  (eventbox
    :onhover "eww update bright-slidedir=\"slidedown\" && eww update bright=1"
    :onhover "eww update utils_stack=5"
    :onhoverlost "eww update bright-slidedir=\"slideup\"&& eww update bright=0"
    (stack
      :selected bright
      :transition bright-slidedir
      :same-size true
      (scale 
        :width 100
        :value current-brightness 
        :tooltip "Brightness: ${round(current-brightness, 0)}%" 
        :onchange "brightnessctl set {}%" 
        :orientation "h" 
        :flipped false 
        :max 101
        :min 0
      )
    )
  )
)

(defwidget volume []
  (eventbox
    :onrightclick { is_muted == "Mute: yes" ? "pactl set-sink-mute @DEFAULT_SINK@ 0 && eww update is_muted=\"Mute: no\"" : "pactl set-sink-mute @DEFAULT_SINK@ 1 && eww update is_muted=\"Mute: yes\""}
    (stack
      :selected { is_muted == "Mute: yes" ? 1 : 0}
      :transition vol-slidedir
      :same-size true
      (scale 
        :width 100
        :value current_volume 
        :tooltip "Volume: ${round(current_volume, 0)}%" 
        :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%; eww update current_volume=\"$(pactl get-sink-volume @DEFAULT_SINK@ | awk '{print $5}' | tr -dc [:digit:])\"" 
        :orientation "h" 
        :flipped false 
        :max 101
        :min 0
      )
      (label
        :text "muted"
      )
    )
  )
)

(defwidget close_button []
  (box
    (button
      :css 'button {color:red;}'
      :onclick 'eww close polybar-menu'
      'x'
    )
  )
)

(defwidget movie_mode [] 
  (eventbox
    (button
      :onclick "./scripts/movie_mode.sh toggle && eww update is_movie_mode=$(./scripts/movie_mode.sh is_movie_mode)"
      :tooltip {is_movie_mode ? "active" : "inactive"}
      :css {is_movie_mode ? "button {color: green;}" : "button {color: red;}"} "󰌢"
    )
  )
)

(defwidget sys_info []
  (box
    :space-evenly false
    :spacing 20
    :halign "center"
    (time_date)
    (battery)
    (cpu_usage)
    (ram_usage)
  )
)

(defwidget battery []
  (tooltip
    "Status: ${EWW_BATTERY["BAT0"]["status"]}"
    "󰁹 ${EWW_BATTERY["BAT0"]["capacity"]}%"
  )
)

(defwidget time_date []
  (eventbox
    :onclick {time_date_shown == 0 ? "eww update time_date_shown=1" : "eww update time_date_shown=0"}
    (stack
      :same-size true
      :selected time_date_shown
      :transition "none"
      (label
        :text " ${formattime(EWW_TIME,"%R")}"
      )
      (label
        :text " ${formattime(EWW_TIME,"%D")}"
      )
    )
  )
)

;; TODO: IPC using i3
(defvar workspace_list "[\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\"]")

(defwidget workspaces []
  (box
    (for entry in workspace_list
      (button 
        :onclick "bspc desktop -f ${entry}"
        entry
      )
    )
  )
)

;; TODO: 
(defwidget weather [] "foo")

(defwidget cpu_usage [] 
  (box
    :tooltip "Core 1: ${EWW_CPU["cores"][0]["usage"]}%
Core 2: ${EWW_CPU["cores"][1]["usage"]}%
Core 3: ${EWW_CPU["cores"][3]["usage"]}%
Temp: ${EWW_TEMPS["CORETEMP_CORE_0"]}°C"
    (circular-progress
      :value "${EWW_TEMPS["avg"]}"
      :thickness 8
    )
    (label
      :text "CPU: ${round(EWW_CPU["avg"],1)}%"
    )
  )
)

;; TODO: 
(defwidget ram_usage []
  (box
    :tooltip "Total RAM: ${round(EWW_RAM["total_mem"]/1000000000,2)}G"
    "RAM: ${round(EWW_RAM["used_mem"]/1000000000,1)}G/${round(EWW_RAM["available_mem"]/1000000000,1)}G"
  )
)

;; TODO: 
(defwidget network_info [] "foo")
;; TODO: 
(defwidget clipboard_manager [] "foo")

;; NOTE: Future feature: (defwidget system_tray [] "foo")
